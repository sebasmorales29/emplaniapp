-- =====================================================
-- SCRIPT: VERIFICAR Y CREAR DATOS B√ÅSICOS NECESARIOS
-- Prop√≥sito: Asegurar que existan los registros m√≠nimos 
--           para que funcione la creaci√≥n de empleados
-- =====================================================

USE EmplaniappBD;
GO

PRINT 'üîç VERIFICANDO DATOS B√ÅSICOS NECESARIOS...';
PRINT '';

-- =====================================================
-- 1. VERIFICAR Y CREAR ESTADOS
-- =====================================================
PRINT 'üìä Verificando Estados...';
IF NOT EXISTS (SELECT 1 FROM Estado WHERE idEstado = 1)
BEGIN
    INSERT INTO Estado (idEstado, nombreEstado) VALUES (1, 'Activo');
    PRINT '‚úÖ Estado "Activo" creado con ID = 1';
END
ELSE
    PRINT '‚úÖ Estado con ID = 1 ya existe';

IF NOT EXISTS (SELECT 1 FROM Estado WHERE idEstado = 2)
BEGIN
    INSERT INTO Estado (idEstado, nombreEstado) VALUES (2, 'Inactivo');
    PRINT '‚úÖ Estado "Inactivo" creado con ID = 2';
END
ELSE
    PRINT '‚úÖ Estado con ID = 2 ya existe';

-- =====================================================
-- 2. VERIFICAR Y CREAR UBICACI√ìN GEOGR√ÅFICA
-- =====================================================
PRINT '';
PRINT 'üó∫Ô∏è Verificando ubicaci√≥n geogr√°fica...';

-- Provincia
IF NOT EXISTS (SELECT 1 FROM Provincia WHERE idProvincia = 1)
BEGIN
    INSERT INTO Provincia (idProvincia, nombreProvincia) VALUES (1, 'San Jos√©');
    PRINT '‚úÖ Provincia "San Jos√©" creada con ID = 1';
END
ELSE
    PRINT '‚úÖ Provincia con ID = 1 ya existe';

-- Canton
IF NOT EXISTS (SELECT 1 FROM Canton WHERE idCanton = 1)
BEGIN
    INSERT INTO Canton (idCanton, nombreCanton, idProvincia) VALUES (1, 'San Jos√©', 1);
    PRINT '‚úÖ Canton "San Jos√©" creado con ID = 1';
END
ELSE
    PRINT '‚úÖ Canton con ID = 1 ya existe';

-- Distrito
IF NOT EXISTS (SELECT 1 FROM Distrito WHERE idDistrito = 1)
BEGIN
    INSERT INTO Distrito (idDistrito, nombreDistrito, idCanton) VALUES (1, 'Carmen', 1);
    PRINT '‚úÖ Distrito "Carmen" creado con ID = 1';
END
ELSE
    PRINT '‚úÖ Distrito con ID = 1 ya existe';

-- Calle
IF NOT EXISTS (SELECT 1 FROM Calle WHERE idCalle = 1)
BEGIN
    INSERT INTO Calle (idCalle, nombreCalle, idDistrito) VALUES (1, 'Calle Central', 1);
    PRINT '‚úÖ Calle "Calle Central" creada con ID = 1';
END
ELSE
    PRINT '‚úÖ Calle con ID = 1 ya existe';

-- NOTA: La tabla Direccion existe en BD pero no se usa en el modelo Empleados
-- El modelo usa campos separados: idProvincia, idCanton, idDistrito, idCalle
-- No es necesario crear registros en Direccion para el funcionamiento del sistema

-- =====================================================
-- 3. VERIFICAR Y CREAR DATOS LABORALES
-- =====================================================
PRINT '';
PRINT 'üíº Verificando datos laborales...';

-- N√∫mero de Ocupaci√≥n
IF NOT EXISTS (SELECT 1 FROM NumeroOcupacion WHERE idNumeroOcupacion = 1)
BEGIN
    INSERT INTO NumeroOcupacion (idNumeroOcupacion, numeroOcupacion) VALUES (1, 1001);
    PRINT '‚úÖ N√∫mero de ocupaci√≥n creado con ID = 1';
END
ELSE
    PRINT '‚úÖ N√∫mero de ocupaci√≥n con ID = 1 ya existe';

-- Cargo
IF NOT EXISTS (SELECT 1 FROM Cargos WHERE idCargo = 1)
BEGIN
    INSERT INTO Cargos (idCargo, nombreCargo, idNumeroOcupacion) VALUES (1, 'Empleado General', 1);
    PRINT '‚úÖ Cargo "Empleado General" creado con ID = 1';
END
ELSE
    PRINT '‚úÖ Cargo con ID = 1 ya existe';

-- =====================================================
-- 4. VERIFICAR Y CREAR DATOS FINANCIEROS
-- =====================================================
PRINT '';
PRINT 'üí∞ Verificando datos financieros...';

-- Tipo de Moneda
IF NOT EXISTS (SELECT 1 FROM TipoMoneda WHERE idTipoMoneda = 1)
BEGIN
    INSERT INTO TipoMoneda (nombreMoneda) VALUES ('Col√≥n Costarricense');
    PRINT '‚úÖ Moneda "Col√≥n Costarricense" creada';
END
ELSE
    PRINT '‚úÖ Tipo de moneda con ID = 1 ya existe';

-- Banco
IF NOT EXISTS (SELECT 1 FROM Bancos WHERE idBanco = 1)
BEGIN
    INSERT INTO Bancos (nombreBanco) VALUES ('Banco Nacional de Costa Rica');
    PRINT '‚úÖ Banco "Banco Nacional de Costa Rica" creado';
END
ELSE
    PRINT '‚úÖ Banco con ID = 1 ya existe';

-- =====================================================
-- 5. VERIFICAR Y CREAR TIPOS DE REMUNERACI√ìN/RETENCI√ìN
-- =====================================================
PRINT '';
PRINT 'üìã Verificando tipos de remuneraci√≥n y retenci√≥n...';

-- Tipos de Remuneraci√≥n
IF NOT EXISTS (SELECT 1 FROM TipoRemuneracion WHERE nombreTipoRemuneracion = 'Horas Extra')
BEGIN
    INSERT INTO TipoRemuneracion (nombreTipoRemuneracion, porcentajeRemuneracion, idEstado) 
    VALUES ('Horas Extra', 1.5, 1);
    PRINT '‚úÖ Tipo remuneraci√≥n "Horas Extra" creado';
END
ELSE
    PRINT '‚úÖ Tipo remuneraci√≥n "Horas Extra" ya existe';

IF NOT EXISTS (SELECT 1 FROM TipoRemuneracion WHERE nombreTipoRemuneracion = 'Pago Quincenal')
BEGIN
    INSERT INTO TipoRemuneracion (nombreTipoRemuneracion, porcentajeRemuneracion, idEstado) 
    VALUES ('Pago Quincenal', 1.0, 1);
    PRINT '‚úÖ Tipo remuneraci√≥n "Pago Quincenal" creado';
END
ELSE
    PRINT '‚úÖ Tipo remuneraci√≥n "Pago Quincenal" ya existe';

-- Tipos de Retenci√≥n b√°sicos
IF NOT EXISTS (SELECT 1 FROM TipoRetenciones WHERE nombreTipoRetencio = 'CCSS Empleado')
BEGIN
    INSERT INTO TipoRetenciones (nombreTipoRetencio, porcentajeRetencion, idEstado) 
    VALUES ('CCSS Empleado', 10.5, 1);
    PRINT '‚úÖ Tipo retenci√≥n "CCSS Empleado" creado';
END
ELSE
    PRINT '‚úÖ Tipo retenci√≥n "CCSS Empleado" ya existe';

IF NOT EXISTS (SELECT 1 FROM TipoRetenciones WHERE nombreTipoRetencio = 'Impuesto Renta')
BEGIN
    INSERT INTO TipoRetenciones (nombreTipoRetencio, porcentajeRetencion, idEstado) 
    VALUES ('Impuesto Renta', 10.0, 1);
    PRINT '‚úÖ Tipo retenci√≥n "Impuesto Renta" creado';
END
ELSE
    PRINT '‚úÖ Tipo retenci√≥n "Impuesto Renta" ya existe';

-- =====================================================
-- 6. VERIFICAR INTEGRIDAD DE DATOS
-- =====================================================
PRINT '';
PRINT 'üîç VERIFICANDO INTEGRIDAD DE DATOS...';
PRINT '';

-- Contar registros en tablas cr√≠ticas
DECLARE @EstadosCount INT, @ProvinciasCount INT, @CantonesCount INT, @DistritosCount INT;
DECLARE @CallesCount INT, @CargosCount INT, @BancosCount INT, @TipoMonedasCount INT;

SELECT @EstadosCount = COUNT(*) FROM Estado;
SELECT @ProvinciasCount = COUNT(*) FROM Provincia;
SELECT @CantonesCount = COUNT(*) FROM Canton;
SELECT @DistritosCount = COUNT(*) FROM Distrito;
SELECT @CallesCount = COUNT(*) FROM Calle;
SELECT @CargosCount = COUNT(*) FROM Cargos;
SELECT @BancosCount = COUNT(*) FROM Bancos;
SELECT @TipoMonedasCount = COUNT(*) FROM TipoMoneda;

PRINT 'üìä RESUMEN DE DATOS B√ÅSICOS:';
PRINT '   ‚Ä¢ Estados: ' + CAST(@EstadosCount AS VARCHAR(10));
PRINT '   ‚Ä¢ Provincias: ' + CAST(@ProvinciasCount AS VARCHAR(10));
PRINT '   ‚Ä¢ Cantones: ' + CAST(@CantonesCount AS VARCHAR(10));
PRINT '   ‚Ä¢ Distritos: ' + CAST(@DistritosCount AS VARCHAR(10));
PRINT '   ‚Ä¢ Calles: ' + CAST(@CallesCount AS VARCHAR(10));
PRINT '   ‚Ä¢ Cargos: ' + CAST(@CargosCount AS VARCHAR(10));
PRINT '   ‚Ä¢ Bancos: ' + CAST(@BancosCount AS VARCHAR(10));
PRINT '   ‚Ä¢ Tipos de Moneda: ' + CAST(@TipoMonedasCount AS VARCHAR(10));

-- Verificar que existan los registros cr√≠ticos con ID = 1
IF EXISTS (
    SELECT 1 FROM Estado WHERE idEstado = 1
) AND EXISTS (
    SELECT 1 FROM Provincia WHERE idProvincia = 1  
) AND EXISTS (
    SELECT 1 FROM Canton WHERE idCanton = 1
) AND EXISTS (
    SELECT 1 FROM Distrito WHERE idDistrito = 1
) AND EXISTS (
    SELECT 1 FROM Calle WHERE idCalle = 1
) AND EXISTS (
    SELECT 1 FROM Cargos WHERE idCargo = 1
) AND EXISTS (
    SELECT 1 FROM Bancos WHERE idBanco = 1
) AND EXISTS (
    SELECT 1 FROM TipoMoneda WHERE idTipoMoneda = 1
)
BEGIN
    PRINT '';
    PRINT '‚úÖ ¬°√âXITO! Todos los datos b√°sicos necesarios est√°n presentes.';
    PRINT '‚úÖ El sistema deber√≠a poder crear empleados sin problemas.';
END
ELSE
BEGIN
    PRINT '';
    PRINT '‚ùå ADVERTENCIA: Faltan algunos datos b√°sicos cr√≠ticos.';
    PRINT '‚ùå Revisa los mensajes anteriores para identificar qu√© falta.';
END

PRINT '';
PRINT 'üéØ SCRIPT COMPLETADO.';
PRINT 'üìã Si el sistema sigue fallando, revisa los logs de debugging en Visual Studio.';
GO 